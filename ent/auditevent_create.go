// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/auditevent"
)

// AuditEventCreate is the builder for creating a AuditEvent entity.
type AuditEventCreate struct {
	config
	mutation *AuditEventMutation
	hooks    []Hook
}

// SetLevel sets the "level" field.
func (aec *AuditEventCreate) SetLevel(s string) *AuditEventCreate {
	aec.mutation.SetLevel(s)
	return aec
}

// SetAuditID sets the "auditID" field.
func (aec *AuditEventCreate) SetAuditID(s string) *AuditEventCreate {
	aec.mutation.SetAuditID(s)
	return aec
}

// SetVerb sets the "verb" field.
func (aec *AuditEventCreate) SetVerb(s string) *AuditEventCreate {
	aec.mutation.SetVerb(s)
	return aec
}

// SetUserAgent sets the "userAgent" field.
func (aec *AuditEventCreate) SetUserAgent(s string) *AuditEventCreate {
	aec.mutation.SetUserAgent(s)
	return aec
}

// SetRaw sets the "raw" field.
func (aec *AuditEventCreate) SetRaw(s string) *AuditEventCreate {
	aec.mutation.SetRaw(s)
	return aec
}

// SetRequestTimestamp sets the "requestTimestamp" field.
func (aec *AuditEventCreate) SetRequestTimestamp(t time.Time) *AuditEventCreate {
	aec.mutation.SetRequestTimestamp(t)
	return aec
}

// SetStageTimestamp sets the "stageTimestamp" field.
func (aec *AuditEventCreate) SetStageTimestamp(t time.Time) *AuditEventCreate {
	aec.mutation.SetStageTimestamp(t)
	return aec
}

// Mutation returns the AuditEventMutation object of the builder.
func (aec *AuditEventCreate) Mutation() *AuditEventMutation {
	return aec.mutation
}

// Save creates the AuditEvent in the database.
func (aec *AuditEventCreate) Save(ctx context.Context) (*AuditEvent, error) {
	return withHooks[*AuditEvent, AuditEventMutation](ctx, aec.sqlSave, aec.mutation, aec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aec *AuditEventCreate) SaveX(ctx context.Context) *AuditEvent {
	v, err := aec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aec *AuditEventCreate) Exec(ctx context.Context) error {
	_, err := aec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aec *AuditEventCreate) ExecX(ctx context.Context) {
	if err := aec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aec *AuditEventCreate) check() error {
	if _, ok := aec.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "AuditEvent.level"`)}
	}
	if v, ok := aec.mutation.Level(); ok {
		if err := auditevent.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "AuditEvent.level": %w`, err)}
		}
	}
	if _, ok := aec.mutation.AuditID(); !ok {
		return &ValidationError{Name: "auditID", err: errors.New(`ent: missing required field "AuditEvent.auditID"`)}
	}
	if v, ok := aec.mutation.AuditID(); ok {
		if err := auditevent.AuditIDValidator(v); err != nil {
			return &ValidationError{Name: "auditID", err: fmt.Errorf(`ent: validator failed for field "AuditEvent.auditID": %w`, err)}
		}
	}
	if _, ok := aec.mutation.Verb(); !ok {
		return &ValidationError{Name: "verb", err: errors.New(`ent: missing required field "AuditEvent.verb"`)}
	}
	if v, ok := aec.mutation.Verb(); ok {
		if err := auditevent.VerbValidator(v); err != nil {
			return &ValidationError{Name: "verb", err: fmt.Errorf(`ent: validator failed for field "AuditEvent.verb": %w`, err)}
		}
	}
	if _, ok := aec.mutation.UserAgent(); !ok {
		return &ValidationError{Name: "userAgent", err: errors.New(`ent: missing required field "AuditEvent.userAgent"`)}
	}
	if v, ok := aec.mutation.UserAgent(); ok {
		if err := auditevent.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "userAgent", err: fmt.Errorf(`ent: validator failed for field "AuditEvent.userAgent": %w`, err)}
		}
	}
	if _, ok := aec.mutation.Raw(); !ok {
		return &ValidationError{Name: "raw", err: errors.New(`ent: missing required field "AuditEvent.raw"`)}
	}
	if v, ok := aec.mutation.Raw(); ok {
		if err := auditevent.RawValidator(v); err != nil {
			return &ValidationError{Name: "raw", err: fmt.Errorf(`ent: validator failed for field "AuditEvent.raw": %w`, err)}
		}
	}
	if _, ok := aec.mutation.RequestTimestamp(); !ok {
		return &ValidationError{Name: "requestTimestamp", err: errors.New(`ent: missing required field "AuditEvent.requestTimestamp"`)}
	}
	if _, ok := aec.mutation.StageTimestamp(); !ok {
		return &ValidationError{Name: "stageTimestamp", err: errors.New(`ent: missing required field "AuditEvent.stageTimestamp"`)}
	}
	return nil
}

func (aec *AuditEventCreate) sqlSave(ctx context.Context) (*AuditEvent, error) {
	if err := aec.check(); err != nil {
		return nil, err
	}
	_node, _spec := aec.createSpec()
	if err := sqlgraph.CreateNode(ctx, aec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aec.mutation.id = &_node.ID
	aec.mutation.done = true
	return _node, nil
}

func (aec *AuditEventCreate) createSpec() (*AuditEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &AuditEvent{config: aec.config}
		_spec = sqlgraph.NewCreateSpec(auditevent.Table, sqlgraph.NewFieldSpec(auditevent.FieldID, field.TypeInt))
	)
	if value, ok := aec.mutation.Level(); ok {
		_spec.SetField(auditevent.FieldLevel, field.TypeString, value)
		_node.Level = value
	}
	if value, ok := aec.mutation.AuditID(); ok {
		_spec.SetField(auditevent.FieldAuditID, field.TypeString, value)
		_node.AuditID = value
	}
	if value, ok := aec.mutation.Verb(); ok {
		_spec.SetField(auditevent.FieldVerb, field.TypeString, value)
		_node.Verb = value
	}
	if value, ok := aec.mutation.UserAgent(); ok {
		_spec.SetField(auditevent.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := aec.mutation.Raw(); ok {
		_spec.SetField(auditevent.FieldRaw, field.TypeString, value)
		_node.Raw = value
	}
	if value, ok := aec.mutation.RequestTimestamp(); ok {
		_spec.SetField(auditevent.FieldRequestTimestamp, field.TypeTime, value)
		_node.RequestTimestamp = value
	}
	if value, ok := aec.mutation.StageTimestamp(); ok {
		_spec.SetField(auditevent.FieldStageTimestamp, field.TypeTime, value)
		_node.StageTimestamp = value
	}
	return _node, _spec
}

// AuditEventCreateBulk is the builder for creating many AuditEvent entities in bulk.
type AuditEventCreateBulk struct {
	config
	builders []*AuditEventCreate
}

// Save creates the AuditEvent entities in the database.
func (aecb *AuditEventCreateBulk) Save(ctx context.Context) ([]*AuditEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aecb.builders))
	nodes := make([]*AuditEvent, len(aecb.builders))
	mutators := make([]Mutator, len(aecb.builders))
	for i := range aecb.builders {
		func(i int, root context.Context) {
			builder := aecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aecb *AuditEventCreateBulk) SaveX(ctx context.Context) []*AuditEvent {
	v, err := aecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aecb *AuditEventCreateBulk) Exec(ctx context.Context) error {
	_, err := aecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aecb *AuditEventCreateBulk) ExecX(ctx context.Context) {
	if err := aecb.Exec(ctx); err != nil {
		panic(err)
	}
}
