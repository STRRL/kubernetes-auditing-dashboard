// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/auditevent"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/resourcekind"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ae *AuditEventQuery) CollectFields(ctx context.Context, satisfies ...string) (*AuditEventQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ae, nil
	}
	if err := ae.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ae, nil
}

func (ae *AuditEventQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(auditevent.Columns))
		selectedFields = []string{auditevent.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "raw":
			if _, ok := fieldSeen[auditevent.FieldRaw]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldRaw)
				fieldSeen[auditevent.FieldRaw] = struct{}{}
			}
		case "level":
			if _, ok := fieldSeen[auditevent.FieldLevel]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldLevel)
				fieldSeen[auditevent.FieldLevel] = struct{}{}
			}
		case "auditid":
			if _, ok := fieldSeen[auditevent.FieldAuditID]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldAuditID)
				fieldSeen[auditevent.FieldAuditID] = struct{}{}
			}
		case "verb":
			if _, ok := fieldSeen[auditevent.FieldVerb]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldVerb)
				fieldSeen[auditevent.FieldVerb] = struct{}{}
			}
		case "useragent":
			if _, ok := fieldSeen[auditevent.FieldUserAgent]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldUserAgent)
				fieldSeen[auditevent.FieldUserAgent] = struct{}{}
			}
		case "requesttimestamp":
			if _, ok := fieldSeen[auditevent.FieldRequestTimestamp]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldRequestTimestamp)
				fieldSeen[auditevent.FieldRequestTimestamp] = struct{}{}
			}
		case "stagetimestamp":
			if _, ok := fieldSeen[auditevent.FieldStageTimestamp]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldStageTimestamp)
				fieldSeen[auditevent.FieldStageTimestamp] = struct{}{}
			}
		case "namespace":
			if _, ok := fieldSeen[auditevent.FieldNamespace]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldNamespace)
				fieldSeen[auditevent.FieldNamespace] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[auditevent.FieldName]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldName)
				fieldSeen[auditevent.FieldName] = struct{}{}
			}
		case "apiversion":
			if _, ok := fieldSeen[auditevent.FieldApiVersion]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldApiVersion)
				fieldSeen[auditevent.FieldApiVersion] = struct{}{}
			}
		case "apigroup":
			if _, ok := fieldSeen[auditevent.FieldApiGroup]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldApiGroup)
				fieldSeen[auditevent.FieldApiGroup] = struct{}{}
			}
		case "resource":
			if _, ok := fieldSeen[auditevent.FieldResource]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldResource)
				fieldSeen[auditevent.FieldResource] = struct{}{}
			}
		case "subresource":
			if _, ok := fieldSeen[auditevent.FieldSubResource]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldSubResource)
				fieldSeen[auditevent.FieldSubResource] = struct{}{}
			}
		case "stage":
			if _, ok := fieldSeen[auditevent.FieldStage]; !ok {
				selectedFields = append(selectedFields, auditevent.FieldStage)
				fieldSeen[auditevent.FieldStage] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ae.Select(selectedFields...)
	}
	return nil
}

type auditeventPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AuditEventPaginateOption
}

func newAuditEventPaginateArgs(rv map[string]any) *auditeventPaginateArgs {
	args := &auditeventPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AuditEventOrder{Field: &AuditEventOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAuditEventOrder(order))
			}
		case *AuditEventOrder:
			if v != nil {
				args.opts = append(args.opts, WithAuditEventOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*AuditEventWhereInput); ok {
		args.opts = append(args.opts, WithAuditEventFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (rk *ResourceKindQuery) CollectFields(ctx context.Context, satisfies ...string) (*ResourceKindQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return rk, nil
	}
	if err := rk.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return rk, nil
}

func (rk *ResourceKindQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(resourcekind.Columns))
		selectedFields = []string{resourcekind.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "name":
			if _, ok := fieldSeen[resourcekind.FieldName]; !ok {
				selectedFields = append(selectedFields, resourcekind.FieldName)
				fieldSeen[resourcekind.FieldName] = struct{}{}
			}
		case "apiversion":
			if _, ok := fieldSeen[resourcekind.FieldApiVersion]; !ok {
				selectedFields = append(selectedFields, resourcekind.FieldApiVersion)
				fieldSeen[resourcekind.FieldApiVersion] = struct{}{}
			}
		case "namespaced":
			if _, ok := fieldSeen[resourcekind.FieldNamespaced]; !ok {
				selectedFields = append(selectedFields, resourcekind.FieldNamespaced)
				fieldSeen[resourcekind.FieldNamespaced] = struct{}{}
			}
		case "kind":
			if _, ok := fieldSeen[resourcekind.FieldKind]; !ok {
				selectedFields = append(selectedFields, resourcekind.FieldKind)
				fieldSeen[resourcekind.FieldKind] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		rk.Select(selectedFields...)
	}
	return nil
}

type resourcekindPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ResourceKindPaginateOption
}

func newResourceKindPaginateArgs(rv map[string]any) *resourcekindPaginateArgs {
	args := &resourcekindPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ResourceKindWhereInput); ok {
		args.opts = append(args.opts, WithResourceKindFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (v *ViewQuery) CollectFields(ctx context.Context, satisfies ...string) (*ViewQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return v, nil
	}
	if err := v.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return v, nil
}

func (v *ViewQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type viewPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ViewPaginateOption
}

func newViewPaginateArgs(rv map[string]any) *viewPaginateArgs {
	args := &viewPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ViewWhereInput); ok {
		args.opts = append(args.opts, WithViewFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
