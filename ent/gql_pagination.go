// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/auditevent"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/resourcekind"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/view"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AuditEventEdge is the edge representation of AuditEvent.
type AuditEventEdge struct {
	Node   *AuditEvent `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AuditEventConnection is the connection containing edges to AuditEvent.
type AuditEventConnection struct {
	Edges      []*AuditEventEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *AuditEventConnection) build(nodes []*AuditEvent, pager *auditeventPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AuditEvent
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AuditEvent {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AuditEvent {
			return nodes[i]
		}
	}
	c.Edges = make([]*AuditEventEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AuditEventEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AuditEventPaginateOption enables pagination customization.
type AuditEventPaginateOption func(*auditeventPager) error

// WithAuditEventOrder configures pagination ordering.
func WithAuditEventOrder(order *AuditEventOrder) AuditEventPaginateOption {
	if order == nil {
		order = DefaultAuditEventOrder
	}
	o := *order
	return func(pager *auditeventPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAuditEventOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAuditEventFilter configures pagination filter.
func WithAuditEventFilter(filter func(*AuditEventQuery) (*AuditEventQuery, error)) AuditEventPaginateOption {
	return func(pager *auditeventPager) error {
		if filter == nil {
			return errors.New("AuditEventQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type auditeventPager struct {
	reverse bool
	order   *AuditEventOrder
	filter  func(*AuditEventQuery) (*AuditEventQuery, error)
}

func newAuditEventPager(opts []AuditEventPaginateOption, reverse bool) (*auditeventPager, error) {
	pager := &auditeventPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAuditEventOrder
	}
	return pager, nil
}

func (p *auditeventPager) applyFilter(query *AuditEventQuery) (*AuditEventQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *auditeventPager) toCursor(ae *AuditEvent) Cursor {
	return p.order.Field.toCursor(ae)
}

func (p *auditeventPager) applyCursors(query *AuditEventQuery, after, before *Cursor) (*AuditEventQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAuditEventOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *auditeventPager) applyOrder(query *AuditEventQuery) *AuditEventQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAuditEventOrder.Field {
		query = query.Order(DefaultAuditEventOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *auditeventPager) orderExpr(query *AuditEventQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAuditEventOrder.Field {
			b.Comma().Ident(DefaultAuditEventOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AuditEvent.
func (ae *AuditEventQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AuditEventPaginateOption,
) (*AuditEventConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAuditEventPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ae, err = pager.applyFilter(ae); err != nil {
		return nil, err
	}
	conn := &AuditEventConnection{Edges: []*AuditEventEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ae.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ae, err = pager.applyCursors(ae, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ae.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ae.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ae = pager.applyOrder(ae)
	nodes, err := ae.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AuditEventOrderField defines the ordering field of AuditEvent.
type AuditEventOrderField struct {
	// Value extracts the ordering value from the given AuditEvent.
	Value    func(*AuditEvent) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) auditevent.OrderOption
	toCursor func(*AuditEvent) Cursor
}

// AuditEventOrder defines the ordering of AuditEvent.
type AuditEventOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AuditEventOrderField `json:"field"`
}

// DefaultAuditEventOrder is the default ordering of AuditEvent.
var DefaultAuditEventOrder = &AuditEventOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AuditEventOrderField{
		Value: func(ae *AuditEvent) (ent.Value, error) {
			return ae.ID, nil
		},
		column: auditevent.FieldID,
		toTerm: auditevent.ByID,
		toCursor: func(ae *AuditEvent) Cursor {
			return Cursor{ID: ae.ID}
		},
	},
}

// ToEdge converts AuditEvent into AuditEventEdge.
func (ae *AuditEvent) ToEdge(order *AuditEventOrder) *AuditEventEdge {
	if order == nil {
		order = DefaultAuditEventOrder
	}
	return &AuditEventEdge{
		Node:   ae,
		Cursor: order.Field.toCursor(ae),
	}
}

// ResourceKindEdge is the edge representation of ResourceKind.
type ResourceKindEdge struct {
	Node   *ResourceKind `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// ResourceKindConnection is the connection containing edges to ResourceKind.
type ResourceKindConnection struct {
	Edges      []*ResourceKindEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *ResourceKindConnection) build(nodes []*ResourceKind, pager *resourcekindPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ResourceKind
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ResourceKind {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ResourceKind {
			return nodes[i]
		}
	}
	c.Edges = make([]*ResourceKindEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ResourceKindEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ResourceKindPaginateOption enables pagination customization.
type ResourceKindPaginateOption func(*resourcekindPager) error

// WithResourceKindOrder configures pagination ordering.
func WithResourceKindOrder(order *ResourceKindOrder) ResourceKindPaginateOption {
	if order == nil {
		order = DefaultResourceKindOrder
	}
	o := *order
	return func(pager *resourcekindPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultResourceKindOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithResourceKindFilter configures pagination filter.
func WithResourceKindFilter(filter func(*ResourceKindQuery) (*ResourceKindQuery, error)) ResourceKindPaginateOption {
	return func(pager *resourcekindPager) error {
		if filter == nil {
			return errors.New("ResourceKindQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type resourcekindPager struct {
	reverse bool
	order   *ResourceKindOrder
	filter  func(*ResourceKindQuery) (*ResourceKindQuery, error)
}

func newResourceKindPager(opts []ResourceKindPaginateOption, reverse bool) (*resourcekindPager, error) {
	pager := &resourcekindPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultResourceKindOrder
	}
	return pager, nil
}

func (p *resourcekindPager) applyFilter(query *ResourceKindQuery) (*ResourceKindQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *resourcekindPager) toCursor(rk *ResourceKind) Cursor {
	return p.order.Field.toCursor(rk)
}

func (p *resourcekindPager) applyCursors(query *ResourceKindQuery, after, before *Cursor) (*ResourceKindQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultResourceKindOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *resourcekindPager) applyOrder(query *ResourceKindQuery) *ResourceKindQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultResourceKindOrder.Field {
		query = query.Order(DefaultResourceKindOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *resourcekindPager) orderExpr(query *ResourceKindQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultResourceKindOrder.Field {
			b.Comma().Ident(DefaultResourceKindOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ResourceKind.
func (rk *ResourceKindQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ResourceKindPaginateOption,
) (*ResourceKindConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newResourceKindPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if rk, err = pager.applyFilter(rk); err != nil {
		return nil, err
	}
	conn := &ResourceKindConnection{Edges: []*ResourceKindEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := rk.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if rk, err = pager.applyCursors(rk, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		rk.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rk.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	rk = pager.applyOrder(rk)
	nodes, err := rk.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ResourceKindOrderField defines the ordering field of ResourceKind.
type ResourceKindOrderField struct {
	// Value extracts the ordering value from the given ResourceKind.
	Value    func(*ResourceKind) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) resourcekind.OrderOption
	toCursor func(*ResourceKind) Cursor
}

// ResourceKindOrder defines the ordering of ResourceKind.
type ResourceKindOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *ResourceKindOrderField `json:"field"`
}

// DefaultResourceKindOrder is the default ordering of ResourceKind.
var DefaultResourceKindOrder = &ResourceKindOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ResourceKindOrderField{
		Value: func(rk *ResourceKind) (ent.Value, error) {
			return rk.ID, nil
		},
		column: resourcekind.FieldID,
		toTerm: resourcekind.ByID,
		toCursor: func(rk *ResourceKind) Cursor {
			return Cursor{ID: rk.ID}
		},
	},
}

// ToEdge converts ResourceKind into ResourceKindEdge.
func (rk *ResourceKind) ToEdge(order *ResourceKindOrder) *ResourceKindEdge {
	if order == nil {
		order = DefaultResourceKindOrder
	}
	return &ResourceKindEdge{
		Node:   rk,
		Cursor: order.Field.toCursor(rk),
	}
}

// ViewEdge is the edge representation of View.
type ViewEdge struct {
	Node   *View  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ViewConnection is the connection containing edges to View.
type ViewConnection struct {
	Edges      []*ViewEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *ViewConnection) build(nodes []*View, pager *viewPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *View
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *View {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *View {
			return nodes[i]
		}
	}
	c.Edges = make([]*ViewEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ViewEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ViewPaginateOption enables pagination customization.
type ViewPaginateOption func(*viewPager) error

// WithViewOrder configures pagination ordering.
func WithViewOrder(order *ViewOrder) ViewPaginateOption {
	if order == nil {
		order = DefaultViewOrder
	}
	o := *order
	return func(pager *viewPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultViewOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithViewFilter configures pagination filter.
func WithViewFilter(filter func(*ViewQuery) (*ViewQuery, error)) ViewPaginateOption {
	return func(pager *viewPager) error {
		if filter == nil {
			return errors.New("ViewQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type viewPager struct {
	reverse bool
	order   *ViewOrder
	filter  func(*ViewQuery) (*ViewQuery, error)
}

func newViewPager(opts []ViewPaginateOption, reverse bool) (*viewPager, error) {
	pager := &viewPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultViewOrder
	}
	return pager, nil
}

func (p *viewPager) applyFilter(query *ViewQuery) (*ViewQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *viewPager) toCursor(v *View) Cursor {
	return p.order.Field.toCursor(v)
}

func (p *viewPager) applyCursors(query *ViewQuery, after, before *Cursor) (*ViewQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultViewOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *viewPager) applyOrder(query *ViewQuery) *ViewQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultViewOrder.Field {
		query = query.Order(DefaultViewOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *viewPager) orderExpr(query *ViewQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultViewOrder.Field {
			b.Comma().Ident(DefaultViewOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to View.
func (v *ViewQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ViewPaginateOption,
) (*ViewConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newViewPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if v, err = pager.applyFilter(v); err != nil {
		return nil, err
	}
	conn := &ViewConnection{Edges: []*ViewEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := v.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if v, err = pager.applyCursors(v, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		v.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := v.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	v = pager.applyOrder(v)
	nodes, err := v.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ViewOrderField defines the ordering field of View.
type ViewOrderField struct {
	// Value extracts the ordering value from the given View.
	Value    func(*View) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) view.OrderOption
	toCursor func(*View) Cursor
}

// ViewOrder defines the ordering of View.
type ViewOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *ViewOrderField `json:"field"`
}

// DefaultViewOrder is the default ordering of View.
var DefaultViewOrder = &ViewOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ViewOrderField{
		Value: func(v *View) (ent.Value, error) {
			return v.ID, nil
		},
		column: view.FieldID,
		toTerm: view.ByID,
		toCursor: func(v *View) Cursor {
			return Cursor{ID: v.ID}
		},
	},
}

// ToEdge converts View into ViewEdge.
func (v *View) ToEdge(order *ViewOrder) *ViewEdge {
	if order == nil {
		order = DefaultViewOrder
	}
	return &ViewEdge{
		Node:   v,
		Cursor: order.Field.toCursor(v),
	}
}
