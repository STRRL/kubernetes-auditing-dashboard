// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/predicate"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/resourcekind"
)

// ResourceKindUpdate is the builder for updating ResourceKind entities.
type ResourceKindUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceKindMutation
}

// Where appends a list predicates to the ResourceKindUpdate builder.
func (_u *ResourceKindUpdate) Where(ps ...predicate.ResourceKind) *ResourceKindUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *ResourceKindUpdate) SetName(v string) *ResourceKindUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ResourceKindUpdate) SetNillableName(v *string) *ResourceKindUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetApiVersion sets the "apiVersion" field.
func (_u *ResourceKindUpdate) SetApiVersion(v string) *ResourceKindUpdate {
	_u.mutation.SetApiVersion(v)
	return _u
}

// SetNillableApiVersion sets the "apiVersion" field if the given value is not nil.
func (_u *ResourceKindUpdate) SetNillableApiVersion(v *string) *ResourceKindUpdate {
	if v != nil {
		_u.SetApiVersion(*v)
	}
	return _u
}

// SetNamespaced sets the "namespaced" field.
func (_u *ResourceKindUpdate) SetNamespaced(v bool) *ResourceKindUpdate {
	_u.mutation.SetNamespaced(v)
	return _u
}

// SetNillableNamespaced sets the "namespaced" field if the given value is not nil.
func (_u *ResourceKindUpdate) SetNillableNamespaced(v *bool) *ResourceKindUpdate {
	if v != nil {
		_u.SetNamespaced(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *ResourceKindUpdate) SetKind(v string) *ResourceKindUpdate {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *ResourceKindUpdate) SetNillableKind(v *string) *ResourceKindUpdate {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// Mutation returns the ResourceKindMutation object of the builder.
func (_u *ResourceKindUpdate) Mutation() *ResourceKindMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ResourceKindUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ResourceKindUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ResourceKindUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ResourceKindUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ResourceKindUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := resourcekind.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ApiVersion(); ok {
		if err := resourcekind.ApiVersionValidator(v); err != nil {
			return &ValidationError{Name: "apiVersion", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.apiVersion": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Kind(); ok {
		if err := resourcekind.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.kind": %w`, err)}
		}
	}
	return nil
}

func (_u *ResourceKindUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resourcekind.Table, resourcekind.Columns, sqlgraph.NewFieldSpec(resourcekind.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(resourcekind.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ApiVersion(); ok {
		_spec.SetField(resourcekind.FieldApiVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Namespaced(); ok {
		_spec.SetField(resourcekind.FieldNamespaced, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(resourcekind.FieldKind, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcekind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ResourceKindUpdateOne is the builder for updating a single ResourceKind entity.
type ResourceKindUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourceKindMutation
}

// SetName sets the "name" field.
func (_u *ResourceKindUpdateOne) SetName(v string) *ResourceKindUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ResourceKindUpdateOne) SetNillableName(v *string) *ResourceKindUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetApiVersion sets the "apiVersion" field.
func (_u *ResourceKindUpdateOne) SetApiVersion(v string) *ResourceKindUpdateOne {
	_u.mutation.SetApiVersion(v)
	return _u
}

// SetNillableApiVersion sets the "apiVersion" field if the given value is not nil.
func (_u *ResourceKindUpdateOne) SetNillableApiVersion(v *string) *ResourceKindUpdateOne {
	if v != nil {
		_u.SetApiVersion(*v)
	}
	return _u
}

// SetNamespaced sets the "namespaced" field.
func (_u *ResourceKindUpdateOne) SetNamespaced(v bool) *ResourceKindUpdateOne {
	_u.mutation.SetNamespaced(v)
	return _u
}

// SetNillableNamespaced sets the "namespaced" field if the given value is not nil.
func (_u *ResourceKindUpdateOne) SetNillableNamespaced(v *bool) *ResourceKindUpdateOne {
	if v != nil {
		_u.SetNamespaced(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *ResourceKindUpdateOne) SetKind(v string) *ResourceKindUpdateOne {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *ResourceKindUpdateOne) SetNillableKind(v *string) *ResourceKindUpdateOne {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// Mutation returns the ResourceKindMutation object of the builder.
func (_u *ResourceKindUpdateOne) Mutation() *ResourceKindMutation {
	return _u.mutation
}

// Where appends a list predicates to the ResourceKindUpdate builder.
func (_u *ResourceKindUpdateOne) Where(ps ...predicate.ResourceKind) *ResourceKindUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ResourceKindUpdateOne) Select(field string, fields ...string) *ResourceKindUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ResourceKind entity.
func (_u *ResourceKindUpdateOne) Save(ctx context.Context) (*ResourceKind, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ResourceKindUpdateOne) SaveX(ctx context.Context) *ResourceKind {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ResourceKindUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ResourceKindUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ResourceKindUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := resourcekind.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ApiVersion(); ok {
		if err := resourcekind.ApiVersionValidator(v); err != nil {
			return &ValidationError{Name: "apiVersion", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.apiVersion": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Kind(); ok {
		if err := resourcekind.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.kind": %w`, err)}
		}
	}
	return nil
}

func (_u *ResourceKindUpdateOne) sqlSave(ctx context.Context) (_node *ResourceKind, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resourcekind.Table, resourcekind.Columns, sqlgraph.NewFieldSpec(resourcekind.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ResourceKind.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcekind.FieldID)
		for _, f := range fields {
			if !resourcekind.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resourcekind.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(resourcekind.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ApiVersion(); ok {
		_spec.SetField(resourcekind.FieldApiVersion, field.TypeString, value)
	}
	if value, ok := _u.mutation.Namespaced(); ok {
		_spec.SetField(resourcekind.FieldNamespaced, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(resourcekind.FieldKind, field.TypeString, value)
	}
	_node = &ResourceKind{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcekind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
