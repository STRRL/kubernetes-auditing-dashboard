// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/strrl/kubernetes-auditing-dashboard/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/auditevent"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/resourcekind"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/view"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuditEvent is the client for interacting with the AuditEvent builders.
	AuditEvent *AuditEventClient
	// ResourceKind is the client for interacting with the ResourceKind builders.
	ResourceKind *ResourceKindClient
	// View is the client for interacting with the View builders.
	View *ViewClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuditEvent = NewAuditEventClient(c.config)
	c.ResourceKind = NewResourceKindClient(c.config)
	c.View = NewViewClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AuditEvent:   NewAuditEventClient(cfg),
		ResourceKind: NewResourceKindClient(cfg),
		View:         NewViewClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		AuditEvent:   NewAuditEventClient(cfg),
		ResourceKind: NewResourceKindClient(cfg),
		View:         NewViewClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuditEvent.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AuditEvent.Use(hooks...)
	c.ResourceKind.Use(hooks...)
	c.View.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.AuditEvent.Intercept(interceptors...)
	c.ResourceKind.Intercept(interceptors...)
	c.View.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuditEventMutation:
		return c.AuditEvent.mutate(ctx, m)
	case *ResourceKindMutation:
		return c.ResourceKind.mutate(ctx, m)
	case *ViewMutation:
		return c.View.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuditEventClient is a client for the AuditEvent schema.
type AuditEventClient struct {
	config
}

// NewAuditEventClient returns a client for the AuditEvent from the given config.
func NewAuditEventClient(c config) *AuditEventClient {
	return &AuditEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auditevent.Hooks(f(g(h())))`.
func (c *AuditEventClient) Use(hooks ...Hook) {
	c.hooks.AuditEvent = append(c.hooks.AuditEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `auditevent.Intercept(f(g(h())))`.
func (c *AuditEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuditEvent = append(c.inters.AuditEvent, interceptors...)
}

// Create returns a builder for creating a AuditEvent entity.
func (c *AuditEventClient) Create() *AuditEventCreate {
	mutation := newAuditEventMutation(c.config, OpCreate)
	return &AuditEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuditEvent entities.
func (c *AuditEventClient) CreateBulk(builders ...*AuditEventCreate) *AuditEventCreateBulk {
	return &AuditEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditEventClient) MapCreateBulk(slice any, setFunc func(*AuditEventCreate, int)) *AuditEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditEventCreateBulk{err: fmt.Errorf("calling to AuditEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuditEvent.
func (c *AuditEventClient) Update() *AuditEventUpdate {
	mutation := newAuditEventMutation(c.config, OpUpdate)
	return &AuditEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditEventClient) UpdateOne(_m *AuditEvent) *AuditEventUpdateOne {
	mutation := newAuditEventMutation(c.config, OpUpdateOne, withAuditEvent(_m))
	return &AuditEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditEventClient) UpdateOneID(id int) *AuditEventUpdateOne {
	mutation := newAuditEventMutation(c.config, OpUpdateOne, withAuditEventID(id))
	return &AuditEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuditEvent.
func (c *AuditEventClient) Delete() *AuditEventDelete {
	mutation := newAuditEventMutation(c.config, OpDelete)
	return &AuditEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditEventClient) DeleteOne(_m *AuditEvent) *AuditEventDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditEventClient) DeleteOneID(id int) *AuditEventDeleteOne {
	builder := c.Delete().Where(auditevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditEventDeleteOne{builder}
}

// Query returns a query builder for AuditEvent.
func (c *AuditEventClient) Query() *AuditEventQuery {
	return &AuditEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuditEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a AuditEvent entity by its id.
func (c *AuditEventClient) Get(ctx context.Context, id int) (*AuditEvent, error) {
	return c.Query().Where(auditevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditEventClient) GetX(ctx context.Context, id int) *AuditEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuditEventClient) Hooks() []Hook {
	return c.hooks.AuditEvent
}

// Interceptors returns the client interceptors.
func (c *AuditEventClient) Interceptors() []Interceptor {
	return c.inters.AuditEvent
}

func (c *AuditEventClient) mutate(ctx context.Context, m *AuditEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuditEvent mutation op: %q", m.Op())
	}
}

// ResourceKindClient is a client for the ResourceKind schema.
type ResourceKindClient struct {
	config
}

// NewResourceKindClient returns a client for the ResourceKind from the given config.
func NewResourceKindClient(c config) *ResourceKindClient {
	return &ResourceKindClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resourcekind.Hooks(f(g(h())))`.
func (c *ResourceKindClient) Use(hooks ...Hook) {
	c.hooks.ResourceKind = append(c.hooks.ResourceKind, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resourcekind.Intercept(f(g(h())))`.
func (c *ResourceKindClient) Intercept(interceptors ...Interceptor) {
	c.inters.ResourceKind = append(c.inters.ResourceKind, interceptors...)
}

// Create returns a builder for creating a ResourceKind entity.
func (c *ResourceKindClient) Create() *ResourceKindCreate {
	mutation := newResourceKindMutation(c.config, OpCreate)
	return &ResourceKindCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResourceKind entities.
func (c *ResourceKindClient) CreateBulk(builders ...*ResourceKindCreate) *ResourceKindCreateBulk {
	return &ResourceKindCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResourceKindClient) MapCreateBulk(slice any, setFunc func(*ResourceKindCreate, int)) *ResourceKindCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResourceKindCreateBulk{err: fmt.Errorf("calling to ResourceKindClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResourceKindCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResourceKindCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResourceKind.
func (c *ResourceKindClient) Update() *ResourceKindUpdate {
	mutation := newResourceKindMutation(c.config, OpUpdate)
	return &ResourceKindUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceKindClient) UpdateOne(_m *ResourceKind) *ResourceKindUpdateOne {
	mutation := newResourceKindMutation(c.config, OpUpdateOne, withResourceKind(_m))
	return &ResourceKindUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceKindClient) UpdateOneID(id int) *ResourceKindUpdateOne {
	mutation := newResourceKindMutation(c.config, OpUpdateOne, withResourceKindID(id))
	return &ResourceKindUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResourceKind.
func (c *ResourceKindClient) Delete() *ResourceKindDelete {
	mutation := newResourceKindMutation(c.config, OpDelete)
	return &ResourceKindDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResourceKindClient) DeleteOne(_m *ResourceKind) *ResourceKindDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResourceKindClient) DeleteOneID(id int) *ResourceKindDeleteOne {
	builder := c.Delete().Where(resourcekind.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceKindDeleteOne{builder}
}

// Query returns a query builder for ResourceKind.
func (c *ResourceKindClient) Query() *ResourceKindQuery {
	return &ResourceKindQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResourceKind},
		inters: c.Interceptors(),
	}
}

// Get returns a ResourceKind entity by its id.
func (c *ResourceKindClient) Get(ctx context.Context, id int) (*ResourceKind, error) {
	return c.Query().Where(resourcekind.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceKindClient) GetX(ctx context.Context, id int) *ResourceKind {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResourceKindClient) Hooks() []Hook {
	return c.hooks.ResourceKind
}

// Interceptors returns the client interceptors.
func (c *ResourceKindClient) Interceptors() []Interceptor {
	return c.inters.ResourceKind
}

func (c *ResourceKindClient) mutate(ctx context.Context, m *ResourceKindMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResourceKindCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResourceKindUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResourceKindUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResourceKindDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ResourceKind mutation op: %q", m.Op())
	}
}

// ViewClient is a client for the View schema.
type ViewClient struct {
	config
}

// NewViewClient returns a client for the View from the given config.
func NewViewClient(c config) *ViewClient {
	return &ViewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `view.Hooks(f(g(h())))`.
func (c *ViewClient) Use(hooks ...Hook) {
	c.hooks.View = append(c.hooks.View, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `view.Intercept(f(g(h())))`.
func (c *ViewClient) Intercept(interceptors ...Interceptor) {
	c.inters.View = append(c.inters.View, interceptors...)
}

// Create returns a builder for creating a View entity.
func (c *ViewClient) Create() *ViewCreate {
	mutation := newViewMutation(c.config, OpCreate)
	return &ViewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of View entities.
func (c *ViewClient) CreateBulk(builders ...*ViewCreate) *ViewCreateBulk {
	return &ViewCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ViewClient) MapCreateBulk(slice any, setFunc func(*ViewCreate, int)) *ViewCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ViewCreateBulk{err: fmt.Errorf("calling to ViewClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ViewCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ViewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for View.
func (c *ViewClient) Update() *ViewUpdate {
	mutation := newViewMutation(c.config, OpUpdate)
	return &ViewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ViewClient) UpdateOne(_m *View) *ViewUpdateOne {
	mutation := newViewMutation(c.config, OpUpdateOne, withView(_m))
	return &ViewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ViewClient) UpdateOneID(id int) *ViewUpdateOne {
	mutation := newViewMutation(c.config, OpUpdateOne, withViewID(id))
	return &ViewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for View.
func (c *ViewClient) Delete() *ViewDelete {
	mutation := newViewMutation(c.config, OpDelete)
	return &ViewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ViewClient) DeleteOne(_m *View) *ViewDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ViewClient) DeleteOneID(id int) *ViewDeleteOne {
	builder := c.Delete().Where(view.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ViewDeleteOne{builder}
}

// Query returns a query builder for View.
func (c *ViewClient) Query() *ViewQuery {
	return &ViewQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeView},
		inters: c.Interceptors(),
	}
}

// Get returns a View entity by its id.
func (c *ViewClient) Get(ctx context.Context, id int) (*View, error) {
	return c.Query().Where(view.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ViewClient) GetX(ctx context.Context, id int) *View {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ViewClient) Hooks() []Hook {
	return c.hooks.View
}

// Interceptors returns the client interceptors.
func (c *ViewClient) Interceptors() []Interceptor {
	return c.inters.View
}

func (c *ViewClient) mutate(ctx context.Context, m *ViewMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ViewCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ViewUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ViewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ViewDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown View mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AuditEvent, ResourceKind, View []ent.Hook
	}
	inters struct {
		AuditEvent, ResourceKind, View []ent.Interceptor
	}
)
