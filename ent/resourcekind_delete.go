// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/predicate"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/resourcekind"
)

// ResourceKindDelete is the builder for deleting a ResourceKind entity.
type ResourceKindDelete struct {
	config
	hooks    []Hook
	mutation *ResourceKindMutation
}

// Where appends a list predicates to the ResourceKindDelete builder.
func (rkd *ResourceKindDelete) Where(ps ...predicate.ResourceKind) *ResourceKindDelete {
	rkd.mutation.Where(ps...)
	return rkd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rkd *ResourceKindDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rkd.sqlExec, rkd.mutation, rkd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rkd *ResourceKindDelete) ExecX(ctx context.Context) int {
	n, err := rkd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rkd *ResourceKindDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resourcekind.Table, sqlgraph.NewFieldSpec(resourcekind.FieldID, field.TypeInt))
	if ps := rkd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rkd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rkd.mutation.done = true
	return affected, err
}

// ResourceKindDeleteOne is the builder for deleting a single ResourceKind entity.
type ResourceKindDeleteOne struct {
	rkd *ResourceKindDelete
}

// Where appends a list predicates to the ResourceKindDelete builder.
func (rkdo *ResourceKindDeleteOne) Where(ps ...predicate.ResourceKind) *ResourceKindDeleteOne {
	rkdo.rkd.mutation.Where(ps...)
	return rkdo
}

// Exec executes the deletion query.
func (rkdo *ResourceKindDeleteOne) Exec(ctx context.Context) error {
	n, err := rkdo.rkd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resourcekind.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rkdo *ResourceKindDeleteOne) ExecX(ctx context.Context) {
	if err := rkdo.Exec(ctx); err != nil {
		panic(err)
	}
}
