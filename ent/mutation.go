// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/auditevent"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuditEvent = "AuditEvent"
)

// AuditEventMutation represents an operation that mutates the AuditEvent nodes in the graph.
type AuditEventMutation struct {
	config
	op               Op
	typ              string
	id               *int
	raw              *string
	level            *string
	auditID          *string
	verb             *string
	userAgent        *string
	requestTimestamp *time.Time
	stageTimestamp   *time.Time
	namespace        *string
	name             *string
	apiVersion       *string
	apiGroup         *string
	resource         *string
	subResource      *string
	stage            *string
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*AuditEvent, error)
	predicates       []predicate.AuditEvent
}

var _ ent.Mutation = (*AuditEventMutation)(nil)

// auditeventOption allows management of the mutation configuration using functional options.
type auditeventOption func(*AuditEventMutation)

// newAuditEventMutation creates new mutation for the AuditEvent entity.
func newAuditEventMutation(c config, op Op, opts ...auditeventOption) *AuditEventMutation {
	m := &AuditEventMutation{
		config:        c,
		op:            op,
		typ:           TypeAuditEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuditEventID sets the ID field of the mutation.
func withAuditEventID(id int) auditeventOption {
	return func(m *AuditEventMutation) {
		var (
			err   error
			once  sync.Once
			value *AuditEvent
		)
		m.oldValue = func(ctx context.Context) (*AuditEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AuditEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuditEvent sets the old AuditEvent of the mutation.
func withAuditEvent(node *AuditEvent) auditeventOption {
	return func(m *AuditEventMutation) {
		m.oldValue = func(context.Context) (*AuditEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuditEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuditEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuditEventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuditEventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AuditEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRaw sets the "raw" field.
func (m *AuditEventMutation) SetRaw(s string) {
	m.raw = &s
}

// Raw returns the value of the "raw" field in the mutation.
func (m *AuditEventMutation) Raw() (r string, exists bool) {
	v := m.raw
	if v == nil {
		return
	}
	return *v, true
}

// OldRaw returns the old "raw" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldRaw(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRaw is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRaw requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRaw: %w", err)
	}
	return oldValue.Raw, nil
}

// ResetRaw resets all changes to the "raw" field.
func (m *AuditEventMutation) ResetRaw() {
	m.raw = nil
}

// SetLevel sets the "level" field.
func (m *AuditEventMutation) SetLevel(s string) {
	m.level = &s
}

// Level returns the value of the "level" field in the mutation.
func (m *AuditEventMutation) Level() (r string, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldLevel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ResetLevel resets all changes to the "level" field.
func (m *AuditEventMutation) ResetLevel() {
	m.level = nil
}

// SetAuditID sets the "auditID" field.
func (m *AuditEventMutation) SetAuditID(s string) {
	m.auditID = &s
}

// AuditID returns the value of the "auditID" field in the mutation.
func (m *AuditEventMutation) AuditID() (r string, exists bool) {
	v := m.auditID
	if v == nil {
		return
	}
	return *v, true
}

// OldAuditID returns the old "auditID" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldAuditID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuditID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuditID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuditID: %w", err)
	}
	return oldValue.AuditID, nil
}

// ResetAuditID resets all changes to the "auditID" field.
func (m *AuditEventMutation) ResetAuditID() {
	m.auditID = nil
}

// SetVerb sets the "verb" field.
func (m *AuditEventMutation) SetVerb(s string) {
	m.verb = &s
}

// Verb returns the value of the "verb" field in the mutation.
func (m *AuditEventMutation) Verb() (r string, exists bool) {
	v := m.verb
	if v == nil {
		return
	}
	return *v, true
}

// OldVerb returns the old "verb" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldVerb(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerb is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerb requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerb: %w", err)
	}
	return oldValue.Verb, nil
}

// ResetVerb resets all changes to the "verb" field.
func (m *AuditEventMutation) ResetVerb() {
	m.verb = nil
}

// SetUserAgent sets the "userAgent" field.
func (m *AuditEventMutation) SetUserAgent(s string) {
	m.userAgent = &s
}

// UserAgent returns the value of the "userAgent" field in the mutation.
func (m *AuditEventMutation) UserAgent() (r string, exists bool) {
	v := m.userAgent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "userAgent" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ResetUserAgent resets all changes to the "userAgent" field.
func (m *AuditEventMutation) ResetUserAgent() {
	m.userAgent = nil
}

// SetRequestTimestamp sets the "requestTimestamp" field.
func (m *AuditEventMutation) SetRequestTimestamp(t time.Time) {
	m.requestTimestamp = &t
}

// RequestTimestamp returns the value of the "requestTimestamp" field in the mutation.
func (m *AuditEventMutation) RequestTimestamp() (r time.Time, exists bool) {
	v := m.requestTimestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestTimestamp returns the old "requestTimestamp" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldRequestTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestTimestamp: %w", err)
	}
	return oldValue.RequestTimestamp, nil
}

// ResetRequestTimestamp resets all changes to the "requestTimestamp" field.
func (m *AuditEventMutation) ResetRequestTimestamp() {
	m.requestTimestamp = nil
}

// SetStageTimestamp sets the "stageTimestamp" field.
func (m *AuditEventMutation) SetStageTimestamp(t time.Time) {
	m.stageTimestamp = &t
}

// StageTimestamp returns the value of the "stageTimestamp" field in the mutation.
func (m *AuditEventMutation) StageTimestamp() (r time.Time, exists bool) {
	v := m.stageTimestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldStageTimestamp returns the old "stageTimestamp" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldStageTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStageTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStageTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStageTimestamp: %w", err)
	}
	return oldValue.StageTimestamp, nil
}

// ResetStageTimestamp resets all changes to the "stageTimestamp" field.
func (m *AuditEventMutation) ResetStageTimestamp() {
	m.stageTimestamp = nil
}

// SetNamespace sets the "namespace" field.
func (m *AuditEventMutation) SetNamespace(s string) {
	m.namespace = &s
}

// Namespace returns the value of the "namespace" field in the mutation.
func (m *AuditEventMutation) Namespace() (r string, exists bool) {
	v := m.namespace
	if v == nil {
		return
	}
	return *v, true
}

// OldNamespace returns the old "namespace" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldNamespace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNamespace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNamespace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNamespace: %w", err)
	}
	return oldValue.Namespace, nil
}

// ResetNamespace resets all changes to the "namespace" field.
func (m *AuditEventMutation) ResetNamespace() {
	m.namespace = nil
}

// SetName sets the "name" field.
func (m *AuditEventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AuditEventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AuditEventMutation) ResetName() {
	m.name = nil
}

// SetApiVersion sets the "apiVersion" field.
func (m *AuditEventMutation) SetApiVersion(s string) {
	m.apiVersion = &s
}

// ApiVersion returns the value of the "apiVersion" field in the mutation.
func (m *AuditEventMutation) ApiVersion() (r string, exists bool) {
	v := m.apiVersion
	if v == nil {
		return
	}
	return *v, true
}

// OldApiVersion returns the old "apiVersion" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldApiVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApiVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApiVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApiVersion: %w", err)
	}
	return oldValue.ApiVersion, nil
}

// ResetApiVersion resets all changes to the "apiVersion" field.
func (m *AuditEventMutation) ResetApiVersion() {
	m.apiVersion = nil
}

// SetApiGroup sets the "apiGroup" field.
func (m *AuditEventMutation) SetApiGroup(s string) {
	m.apiGroup = &s
}

// ApiGroup returns the value of the "apiGroup" field in the mutation.
func (m *AuditEventMutation) ApiGroup() (r string, exists bool) {
	v := m.apiGroup
	if v == nil {
		return
	}
	return *v, true
}

// OldApiGroup returns the old "apiGroup" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldApiGroup(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApiGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApiGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApiGroup: %w", err)
	}
	return oldValue.ApiGroup, nil
}

// ResetApiGroup resets all changes to the "apiGroup" field.
func (m *AuditEventMutation) ResetApiGroup() {
	m.apiGroup = nil
}

// SetResource sets the "resource" field.
func (m *AuditEventMutation) SetResource(s string) {
	m.resource = &s
}

// Resource returns the value of the "resource" field in the mutation.
func (m *AuditEventMutation) Resource() (r string, exists bool) {
	v := m.resource
	if v == nil {
		return
	}
	return *v, true
}

// OldResource returns the old "resource" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldResource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResource: %w", err)
	}
	return oldValue.Resource, nil
}

// ResetResource resets all changes to the "resource" field.
func (m *AuditEventMutation) ResetResource() {
	m.resource = nil
}

// SetSubResource sets the "subResource" field.
func (m *AuditEventMutation) SetSubResource(s string) {
	m.subResource = &s
}

// SubResource returns the value of the "subResource" field in the mutation.
func (m *AuditEventMutation) SubResource() (r string, exists bool) {
	v := m.subResource
	if v == nil {
		return
	}
	return *v, true
}

// OldSubResource returns the old "subResource" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldSubResource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubResource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubResource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubResource: %w", err)
	}
	return oldValue.SubResource, nil
}

// ResetSubResource resets all changes to the "subResource" field.
func (m *AuditEventMutation) ResetSubResource() {
	m.subResource = nil
}

// SetStage sets the "stage" field.
func (m *AuditEventMutation) SetStage(s string) {
	m.stage = &s
}

// Stage returns the value of the "stage" field in the mutation.
func (m *AuditEventMutation) Stage() (r string, exists bool) {
	v := m.stage
	if v == nil {
		return
	}
	return *v, true
}

// OldStage returns the old "stage" field's value of the AuditEvent entity.
// If the AuditEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditEventMutation) OldStage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStage: %w", err)
	}
	return oldValue.Stage, nil
}

// ResetStage resets all changes to the "stage" field.
func (m *AuditEventMutation) ResetStage() {
	m.stage = nil
}

// Where appends a list predicates to the AuditEventMutation builder.
func (m *AuditEventMutation) Where(ps ...predicate.AuditEvent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuditEventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuditEventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AuditEvent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuditEventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuditEventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AuditEvent).
func (m *AuditEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuditEventMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.raw != nil {
		fields = append(fields, auditevent.FieldRaw)
	}
	if m.level != nil {
		fields = append(fields, auditevent.FieldLevel)
	}
	if m.auditID != nil {
		fields = append(fields, auditevent.FieldAuditID)
	}
	if m.verb != nil {
		fields = append(fields, auditevent.FieldVerb)
	}
	if m.userAgent != nil {
		fields = append(fields, auditevent.FieldUserAgent)
	}
	if m.requestTimestamp != nil {
		fields = append(fields, auditevent.FieldRequestTimestamp)
	}
	if m.stageTimestamp != nil {
		fields = append(fields, auditevent.FieldStageTimestamp)
	}
	if m.namespace != nil {
		fields = append(fields, auditevent.FieldNamespace)
	}
	if m.name != nil {
		fields = append(fields, auditevent.FieldName)
	}
	if m.apiVersion != nil {
		fields = append(fields, auditevent.FieldApiVersion)
	}
	if m.apiGroup != nil {
		fields = append(fields, auditevent.FieldApiGroup)
	}
	if m.resource != nil {
		fields = append(fields, auditevent.FieldResource)
	}
	if m.subResource != nil {
		fields = append(fields, auditevent.FieldSubResource)
	}
	if m.stage != nil {
		fields = append(fields, auditevent.FieldStage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuditEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case auditevent.FieldRaw:
		return m.Raw()
	case auditevent.FieldLevel:
		return m.Level()
	case auditevent.FieldAuditID:
		return m.AuditID()
	case auditevent.FieldVerb:
		return m.Verb()
	case auditevent.FieldUserAgent:
		return m.UserAgent()
	case auditevent.FieldRequestTimestamp:
		return m.RequestTimestamp()
	case auditevent.FieldStageTimestamp:
		return m.StageTimestamp()
	case auditevent.FieldNamespace:
		return m.Namespace()
	case auditevent.FieldName:
		return m.Name()
	case auditevent.FieldApiVersion:
		return m.ApiVersion()
	case auditevent.FieldApiGroup:
		return m.ApiGroup()
	case auditevent.FieldResource:
		return m.Resource()
	case auditevent.FieldSubResource:
		return m.SubResource()
	case auditevent.FieldStage:
		return m.Stage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuditEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case auditevent.FieldRaw:
		return m.OldRaw(ctx)
	case auditevent.FieldLevel:
		return m.OldLevel(ctx)
	case auditevent.FieldAuditID:
		return m.OldAuditID(ctx)
	case auditevent.FieldVerb:
		return m.OldVerb(ctx)
	case auditevent.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case auditevent.FieldRequestTimestamp:
		return m.OldRequestTimestamp(ctx)
	case auditevent.FieldStageTimestamp:
		return m.OldStageTimestamp(ctx)
	case auditevent.FieldNamespace:
		return m.OldNamespace(ctx)
	case auditevent.FieldName:
		return m.OldName(ctx)
	case auditevent.FieldApiVersion:
		return m.OldApiVersion(ctx)
	case auditevent.FieldApiGroup:
		return m.OldApiGroup(ctx)
	case auditevent.FieldResource:
		return m.OldResource(ctx)
	case auditevent.FieldSubResource:
		return m.OldSubResource(ctx)
	case auditevent.FieldStage:
		return m.OldStage(ctx)
	}
	return nil, fmt.Errorf("unknown AuditEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuditEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case auditevent.FieldRaw:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRaw(v)
		return nil
	case auditevent.FieldLevel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case auditevent.FieldAuditID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuditID(v)
		return nil
	case auditevent.FieldVerb:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerb(v)
		return nil
	case auditevent.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case auditevent.FieldRequestTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestTimestamp(v)
		return nil
	case auditevent.FieldStageTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStageTimestamp(v)
		return nil
	case auditevent.FieldNamespace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNamespace(v)
		return nil
	case auditevent.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case auditevent.FieldApiVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApiVersion(v)
		return nil
	case auditevent.FieldApiGroup:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApiGroup(v)
		return nil
	case auditevent.FieldResource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResource(v)
		return nil
	case auditevent.FieldSubResource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubResource(v)
		return nil
	case auditevent.FieldStage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStage(v)
		return nil
	}
	return fmt.Errorf("unknown AuditEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuditEventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuditEventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuditEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AuditEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuditEventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuditEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuditEventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AuditEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuditEventMutation) ResetField(name string) error {
	switch name {
	case auditevent.FieldRaw:
		m.ResetRaw()
		return nil
	case auditevent.FieldLevel:
		m.ResetLevel()
		return nil
	case auditevent.FieldAuditID:
		m.ResetAuditID()
		return nil
	case auditevent.FieldVerb:
		m.ResetVerb()
		return nil
	case auditevent.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case auditevent.FieldRequestTimestamp:
		m.ResetRequestTimestamp()
		return nil
	case auditevent.FieldStageTimestamp:
		m.ResetStageTimestamp()
		return nil
	case auditevent.FieldNamespace:
		m.ResetNamespace()
		return nil
	case auditevent.FieldName:
		m.ResetName()
		return nil
	case auditevent.FieldApiVersion:
		m.ResetApiVersion()
		return nil
	case auditevent.FieldApiGroup:
		m.ResetApiGroup()
		return nil
	case auditevent.FieldResource:
		m.ResetResource()
		return nil
	case auditevent.FieldSubResource:
		m.ResetSubResource()
		return nil
	case auditevent.FieldStage:
		m.ResetStage()
		return nil
	}
	return fmt.Errorf("unknown AuditEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuditEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuditEventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuditEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuditEventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuditEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuditEventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuditEventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AuditEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuditEventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AuditEvent edge %s", name)
}
