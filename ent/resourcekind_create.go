// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/strrl/kubernetes-auditing-dashboard/ent/resourcekind"
)

// ResourceKindCreate is the builder for creating a ResourceKind entity.
type ResourceKindCreate struct {
	config
	mutation *ResourceKindMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rkc *ResourceKindCreate) SetName(s string) *ResourceKindCreate {
	rkc.mutation.SetName(s)
	return rkc
}

// SetApiVersion sets the "apiVersion" field.
func (rkc *ResourceKindCreate) SetApiVersion(s string) *ResourceKindCreate {
	rkc.mutation.SetApiVersion(s)
	return rkc
}

// SetNamespaced sets the "namespaced" field.
func (rkc *ResourceKindCreate) SetNamespaced(b bool) *ResourceKindCreate {
	rkc.mutation.SetNamespaced(b)
	return rkc
}

// SetNillableNamespaced sets the "namespaced" field if the given value is not nil.
func (rkc *ResourceKindCreate) SetNillableNamespaced(b *bool) *ResourceKindCreate {
	if b != nil {
		rkc.SetNamespaced(*b)
	}
	return rkc
}

// SetKind sets the "kind" field.
func (rkc *ResourceKindCreate) SetKind(s string) *ResourceKindCreate {
	rkc.mutation.SetKind(s)
	return rkc
}

// Mutation returns the ResourceKindMutation object of the builder.
func (rkc *ResourceKindCreate) Mutation() *ResourceKindMutation {
	return rkc.mutation
}

// Save creates the ResourceKind in the database.
func (rkc *ResourceKindCreate) Save(ctx context.Context) (*ResourceKind, error) {
	rkc.defaults()
	return withHooks[*ResourceKind, ResourceKindMutation](ctx, rkc.sqlSave, rkc.mutation, rkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rkc *ResourceKindCreate) SaveX(ctx context.Context) *ResourceKind {
	v, err := rkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rkc *ResourceKindCreate) Exec(ctx context.Context) error {
	_, err := rkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rkc *ResourceKindCreate) ExecX(ctx context.Context) {
	if err := rkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rkc *ResourceKindCreate) defaults() {
	if _, ok := rkc.mutation.Namespaced(); !ok {
		v := resourcekind.DefaultNamespaced
		rkc.mutation.SetNamespaced(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rkc *ResourceKindCreate) check() error {
	if _, ok := rkc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ResourceKind.name"`)}
	}
	if v, ok := rkc.mutation.Name(); ok {
		if err := resourcekind.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.name": %w`, err)}
		}
	}
	if _, ok := rkc.mutation.ApiVersion(); !ok {
		return &ValidationError{Name: "apiVersion", err: errors.New(`ent: missing required field "ResourceKind.apiVersion"`)}
	}
	if v, ok := rkc.mutation.ApiVersion(); ok {
		if err := resourcekind.ApiVersionValidator(v); err != nil {
			return &ValidationError{Name: "apiVersion", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.apiVersion": %w`, err)}
		}
	}
	if _, ok := rkc.mutation.Namespaced(); !ok {
		return &ValidationError{Name: "namespaced", err: errors.New(`ent: missing required field "ResourceKind.namespaced"`)}
	}
	if _, ok := rkc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "ResourceKind.kind"`)}
	}
	if v, ok := rkc.mutation.Kind(); ok {
		if err := resourcekind.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "ResourceKind.kind": %w`, err)}
		}
	}
	return nil
}

func (rkc *ResourceKindCreate) sqlSave(ctx context.Context) (*ResourceKind, error) {
	if err := rkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rkc.mutation.id = &_node.ID
	rkc.mutation.done = true
	return _node, nil
}

func (rkc *ResourceKindCreate) createSpec() (*ResourceKind, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceKind{config: rkc.config}
		_spec = sqlgraph.NewCreateSpec(resourcekind.Table, sqlgraph.NewFieldSpec(resourcekind.FieldID, field.TypeInt))
	)
	if value, ok := rkc.mutation.Name(); ok {
		_spec.SetField(resourcekind.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rkc.mutation.ApiVersion(); ok {
		_spec.SetField(resourcekind.FieldApiVersion, field.TypeString, value)
		_node.ApiVersion = value
	}
	if value, ok := rkc.mutation.Namespaced(); ok {
		_spec.SetField(resourcekind.FieldNamespaced, field.TypeBool, value)
		_node.Namespaced = value
	}
	if value, ok := rkc.mutation.Kind(); ok {
		_spec.SetField(resourcekind.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	return _node, _spec
}

// ResourceKindCreateBulk is the builder for creating many ResourceKind entities in bulk.
type ResourceKindCreateBulk struct {
	config
	builders []*ResourceKindCreate
}

// Save creates the ResourceKind entities in the database.
func (rkcb *ResourceKindCreateBulk) Save(ctx context.Context) ([]*ResourceKind, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rkcb.builders))
	nodes := make([]*ResourceKind, len(rkcb.builders))
	mutators := make([]Mutator, len(rkcb.builders))
	for i := range rkcb.builders {
		func(i int, root context.Context) {
			builder := rkcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceKindMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rkcb *ResourceKindCreateBulk) SaveX(ctx context.Context) []*ResourceKind {
	v, err := rkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rkcb *ResourceKindCreateBulk) Exec(ctx context.Context) error {
	_, err := rkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rkcb *ResourceKindCreateBulk) ExecX(ctx context.Context) {
	if err := rkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
