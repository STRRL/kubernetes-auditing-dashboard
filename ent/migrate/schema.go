// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuditEventsColumns holds the columns for the "audit_events" table.
	AuditEventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "raw", Type: field.TypeString, Size: 2147483647},
		{Name: "level", Type: field.TypeString},
		{Name: "audit_id", Type: field.TypeString},
		{Name: "verb", Type: field.TypeString},
		{Name: "user_agent", Type: field.TypeString},
		{Name: "request_timestamp", Type: field.TypeTime},
		{Name: "stage_timestamp", Type: field.TypeTime},
		{Name: "namespace", Type: field.TypeString, Default: ""},
		{Name: "name", Type: field.TypeString, Default: ""},
		{Name: "api_version", Type: field.TypeString, Default: ""},
		{Name: "api_group", Type: field.TypeString, Default: ""},
		{Name: "resource", Type: field.TypeString, Default: ""},
		{Name: "sub_resource", Type: field.TypeString, Default: ""},
		{Name: "stage", Type: field.TypeString},
	}
	// AuditEventsTable holds the schema information for the "audit_events" table.
	AuditEventsTable = &schema.Table{
		Name:       "audit_events",
		Columns:    AuditEventsColumns,
		PrimaryKey: []*schema.Column{AuditEventsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "auditevent_level_verb",
				Unique:  false,
				Columns: []*schema.Column{AuditEventsColumns[2], AuditEventsColumns[4]},
			},
			{
				Name:    "auditevent_verb",
				Unique:  false,
				Columns: []*schema.Column{AuditEventsColumns[4]},
			},
			{
				Name:    "auditevent_audit_id",
				Unique:  false,
				Columns: []*schema.Column{AuditEventsColumns[3]},
			},
			{
				Name:    "auditevent_user_agent",
				Unique:  false,
				Columns: []*schema.Column{AuditEventsColumns[5]},
			},
			{
				Name:    "auditevent_request_timestamp",
				Unique:  false,
				Columns: []*schema.Column{AuditEventsColumns[6]},
			},
			{
				Name:    "auditevent_stage_timestamp",
				Unique:  false,
				Columns: []*schema.Column{AuditEventsColumns[7]},
			},
			{
				Name:    "auditevent_api_group_api_version_resource_namespace_name_request_timestamp",
				Unique:  false,
				Columns: []*schema.Column{AuditEventsColumns[11], AuditEventsColumns[10], AuditEventsColumns[12], AuditEventsColumns[8], AuditEventsColumns[9], AuditEventsColumns[6]},
			},
		},
	}
	// ResourceKindsColumns holds the columns for the "resource_kinds" table.
	ResourceKindsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "api_version", Type: field.TypeString, Unique: true},
		{Name: "namespaced", Type: field.TypeBool, Default: true},
		{Name: "kind", Type: field.TypeString, Unique: true},
	}
	// ResourceKindsTable holds the schema information for the "resource_kinds" table.
	ResourceKindsTable = &schema.Table{
		Name:       "resource_kinds",
		Columns:    ResourceKindsColumns,
		PrimaryKey: []*schema.Column{ResourceKindsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "resourcekind_api_version_name",
				Unique:  false,
				Columns: []*schema.Column{ResourceKindsColumns[2], ResourceKindsColumns[1]},
			},
			{
				Name:    "resourcekind_name",
				Unique:  false,
				Columns: []*schema.Column{ResourceKindsColumns[1]},
			},
		},
	}
	// ViewsColumns holds the columns for the "views" table.
	ViewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// ViewsTable holds the schema information for the "views" table.
	ViewsTable = &schema.Table{
		Name:       "views",
		Columns:    ViewsColumns,
		PrimaryKey: []*schema.Column{ViewsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuditEventsTable,
		ResourceKindsTable,
		ViewsTable,
	}
)

func init() {
}
