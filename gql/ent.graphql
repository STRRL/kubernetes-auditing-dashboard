directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AuditEvent implements Node {
  id: ID!
  raw: String!
  level: String!
  auditid: String! @goField(name: "AuditID", forceResolver: false)
  verb: String!
  useragent: String! @goField(name: "UserAgent", forceResolver: false)
  requesttimestamp: Time! @goField(name: "RequestTimestamp", forceResolver: false)
  stagetimestamp: Time! @goField(name: "StageTimestamp", forceResolver: false)
  namespace: String!
  name: String!
  apiversion: String! @goField(name: "ApiVersion", forceResolver: false)
  apigroup: String! @goField(name: "ApiGroup", forceResolver: false)
  resource: String!
  subresource: String! @goField(name: "SubResource", forceResolver: false)
  stage: String!
}
"""
A connection to a list of items.
"""
type AuditEventConnection {
  """
  A list of edges.
  """
  edges: [AuditEventEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AuditEventEdge {
  """
  The item at the end of the edge.
  """
  node: AuditEvent
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AuditEventWhereInput is used for filtering AuditEvent objects.
Input was generated by ent.
"""
input AuditEventWhereInput {
  not: AuditEventWhereInput
  and: [AuditEventWhereInput!]
  or: [AuditEventWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  raw field predicates
  """
  raw: String
  rawNEQ: String
  rawIn: [String!]
  rawNotIn: [String!]
  rawGT: String
  rawGTE: String
  rawLT: String
  rawLTE: String
  rawContains: String
  rawHasPrefix: String
  rawHasSuffix: String
  rawEqualFold: String
  rawContainsFold: String
  """
  level field predicates
  """
  level: String
  levelNEQ: String
  levelIn: [String!]
  levelNotIn: [String!]
  levelGT: String
  levelGTE: String
  levelLT: String
  levelLTE: String
  levelContains: String
  levelHasPrefix: String
  levelHasSuffix: String
  levelEqualFold: String
  levelContainsFold: String
  """
  auditID field predicates
  """
  auditid: String
  auditidNEQ: String
  auditidIn: [String!]
  auditidNotIn: [String!]
  auditidGT: String
  auditidGTE: String
  auditidLT: String
  auditidLTE: String
  auditidContains: String
  auditidHasPrefix: String
  auditidHasSuffix: String
  auditidEqualFold: String
  auditidContainsFold: String
  """
  verb field predicates
  """
  verb: String
  verbNEQ: String
  verbIn: [String!]
  verbNotIn: [String!]
  verbGT: String
  verbGTE: String
  verbLT: String
  verbLTE: String
  verbContains: String
  verbHasPrefix: String
  verbHasSuffix: String
  verbEqualFold: String
  verbContainsFold: String
  """
  userAgent field predicates
  """
  useragent: String
  useragentNEQ: String
  useragentIn: [String!]
  useragentNotIn: [String!]
  useragentGT: String
  useragentGTE: String
  useragentLT: String
  useragentLTE: String
  useragentContains: String
  useragentHasPrefix: String
  useragentHasSuffix: String
  useragentEqualFold: String
  useragentContainsFold: String
  """
  requestTimestamp field predicates
  """
  requesttimestamp: Time
  requesttimestampNEQ: Time
  requesttimestampIn: [Time!]
  requesttimestampNotIn: [Time!]
  requesttimestampGT: Time
  requesttimestampGTE: Time
  requesttimestampLT: Time
  requesttimestampLTE: Time
  """
  stageTimestamp field predicates
  """
  stagetimestamp: Time
  stagetimestampNEQ: Time
  stagetimestampIn: [Time!]
  stagetimestampNotIn: [Time!]
  stagetimestampGT: Time
  stagetimestampGTE: Time
  stagetimestampLT: Time
  stagetimestampLTE: Time
  """
  namespace field predicates
  """
  namespace: String
  namespaceNEQ: String
  namespaceIn: [String!]
  namespaceNotIn: [String!]
  namespaceGT: String
  namespaceGTE: String
  namespaceLT: String
  namespaceLTE: String
  namespaceContains: String
  namespaceHasPrefix: String
  namespaceHasSuffix: String
  namespaceEqualFold: String
  namespaceContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  apiVersion field predicates
  """
  apiversion: String
  apiversionNEQ: String
  apiversionIn: [String!]
  apiversionNotIn: [String!]
  apiversionGT: String
  apiversionGTE: String
  apiversionLT: String
  apiversionLTE: String
  apiversionContains: String
  apiversionHasPrefix: String
  apiversionHasSuffix: String
  apiversionEqualFold: String
  apiversionContainsFold: String
  """
  apiGroup field predicates
  """
  apigroup: String
  apigroupNEQ: String
  apigroupIn: [String!]
  apigroupNotIn: [String!]
  apigroupGT: String
  apigroupGTE: String
  apigroupLT: String
  apigroupLTE: String
  apigroupContains: String
  apigroupHasPrefix: String
  apigroupHasSuffix: String
  apigroupEqualFold: String
  apigroupContainsFold: String
  """
  resource field predicates
  """
  resource: String
  resourceNEQ: String
  resourceIn: [String!]
  resourceNotIn: [String!]
  resourceGT: String
  resourceGTE: String
  resourceLT: String
  resourceLTE: String
  resourceContains: String
  resourceHasPrefix: String
  resourceHasSuffix: String
  resourceEqualFold: String
  resourceContainsFold: String
  """
  subResource field predicates
  """
  subresource: String
  subresourceNEQ: String
  subresourceIn: [String!]
  subresourceNotIn: [String!]
  subresourceGT: String
  subresourceGTE: String
  subresourceLT: String
  subresourceLTE: String
  subresourceContains: String
  subresourceHasPrefix: String
  subresourceHasSuffix: String
  subresourceEqualFold: String
  subresourceContainsFold: String
  """
  stage field predicates
  """
  stage: String
  stageNEQ: String
  stageIn: [String!]
  stageNotIn: [String!]
  stageGT: String
  stageGTE: String
  stageLT: String
  stageLTE: String
  stageContains: String
  stageHasPrefix: String
  stageHasSuffix: String
  stageEqualFold: String
  stageContainsFold: String
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/strrl/kubernetes-auditing-dashboard/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  auditEvents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for AuditEvents returned from the connection.
    """
    where: AuditEventWhereInput
  ): AuditEventConnection!
  resourceKinds(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ResourceKinds returned from the connection.
    """
    where: ResourceKindWhereInput
  ): ResourceKindConnection!
}
type ResourceKind implements Node {
  id: ID!
  name: String!
  apiversion: String! @goField(name: "ApiVersion", forceResolver: false)
  namespaced: Boolean!
  kind: String!
}
"""
A connection to a list of items.
"""
type ResourceKindConnection {
  """
  A list of edges.
  """
  edges: [ResourceKindEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ResourceKindEdge {
  """
  The item at the end of the edge.
  """
  node: ResourceKind
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ResourceKindWhereInput is used for filtering ResourceKind objects.
Input was generated by ent.
"""
input ResourceKindWhereInput {
  not: ResourceKindWhereInput
  and: [ResourceKindWhereInput!]
  or: [ResourceKindWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  apiVersion field predicates
  """
  apiversion: String
  apiversionNEQ: String
  apiversionIn: [String!]
  apiversionNotIn: [String!]
  apiversionGT: String
  apiversionGTE: String
  apiversionLT: String
  apiversionLTE: String
  apiversionContains: String
  apiversionHasPrefix: String
  apiversionHasSuffix: String
  apiversionEqualFold: String
  apiversionContainsFold: String
  """
  namespaced field predicates
  """
  namespaced: Boolean
  namespacedNEQ: Boolean
  """
  kind field predicates
  """
  kind: String
  kindNEQ: String
  kindIn: [String!]
  kindNotIn: [String!]
  kindGT: String
  kindGTE: String
  kindLT: String
  kindLTE: String
  kindContains: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindEqualFold: String
  kindContainsFold: String
}
type View implements Node {
  id: ID!
}
"""
ViewWhereInput is used for filtering View objects.
Input was generated by ent.
"""
input ViewWhereInput {
  not: ViewWhereInput
  and: [ViewWhereInput!]
  or: [ViewWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
